Terminals unused in grammar

    DUMMY
    VOID


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: thingThatCanHappen
    3           | funcs
    4           | thingThatCanHappen statements
    5           | funcs statements

    6 lbrace: LBRACE

    7 rbrace: RBRACE

    8 funcs: etype IDENTIFIER LPAREN declaration_list RPAREN lbrace statementsf rbrace

    9 statementsf: thingThatCanHappen
   10            | felements
   11            | felements statementsf
   12            | thingThatCanHappen statementsf

   13 declaration_list: lastdec
   14                 | declaration declaration_list
   15                 | ε

   16 lastdec: etype IDENTIFIER

   17 declaration: etype IDENTIFIER COLON

   18 thingThatCanHappen: statement
   19                   | IDENTIFIER ASSIGN expression SEMICOLON
   20                   | IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON

   21 funcCallList: expression
   22             | CHARVALUE
   23             | IDENTIFIER COLON funcCallList

   24 statement: etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON

   26 elseOp: ELSE lbrace statementsf rbrace

   27 felements: IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | IF LPAREN boolElement RPAREN lbrace statementsf rbrace
   29          | WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace
   30          | RETURN expression SEMICOLON
   31          | FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace

   32 actualizacion: IDENTIFIER ADD ADD
   33              | IDENTIFIER SUB SUB
   34              | IDENTIFIER ASSIGN expression

   35 boolElement: IDENTIFIER bcomparator expression
   36            | IDENTIFIER

   37 bcomparator: EQ
   38            | NE
   39            | GE
   40            | GT
   41            | LE
   42            | LT

   43 expression: term
   44           | expression ADD term
   45           | expression SUB term

   46 term: factor
   47     | term MUL factor
   48     | term DIV factor

   49 factor: IDENTIFIER
   50       | INTEGER
   51       | LPAREN expression RPAREN

   52 etype: INT
   53      | FLOAT
   54      | DOUBLE
   55      | CHAR


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    DUMMY (258)
    ADD (259) 32 44
    SUB (260) 33 45
    MUL (261) 47
    DIV (262) 48
    ASSIGN (263) 19 24 25 34
    SEMICOLON (264) 19 20 24 25 30 31
    LPAREN (265) 8 20 27 28 29 31 51
    RPAREN (266) 8 20 27 28 29 31 51
    INT (267) 52
    FLOAT (268) 53
    DOUBLE (269) 54
    CHAR (270) 55
    VOID (271)
    COLON (272) 17 23
    LBRACE (273) 6
    RBRACE (274) 7
    RETURN (275) 30
    IF (276) 27 28
    ELSE (277) 26
    WHILE (278) 29
    FOR (279) 31
    EQ (280) 37
    NE (281) 38
    GE (282) 39
    GT (283) 40
    LE (284) 41
    LT (285) 42
    IDENTIFIER <string> (286) 8 16 17 19 20 23 24 25 32 33 34 35 36 49
    INTEGER <string> (287) 50
    CHARVALUE <string> (288) 22 25


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    program (35)
        on left: 1
        on right: 0
    statements <string> (36)
        on left: 2 3 4 5
        on right: 1 4 5
    lbrace (37)
        on left: 6
        on right: 8 26 27 28 29 31
    rbrace (38)
        on left: 7
        on right: 8 26 27 28 29 31
    funcs <string> (39)
        on left: 8
        on right: 3 5
    statementsf <string> (40)
        on left: 9 10 11 12
        on right: 8 11 12 26 27 28 29 31
    declaration_list <string> (41)
        on left: 13 14 15
        on right: 8 14
    lastdec <string> (42)
        on left: 16
        on right: 13
    declaration <string> (43)
        on left: 17
        on right: 14
    thingThatCanHappen <string> (44)
        on left: 18 19 20
        on right: 2 4 9 12
    funcCallList <string> (45)
        on left: 21 22 23
        on right: 20 23
    statement <string> (46)
        on left: 24 25
        on right: 18 31
    elseOp <string> (47)
        on left: 26
        on right: 27
    felements <string> (48)
        on left: 27 28 29 30 31
        on right: 10 11
    actualizacion <string> (49)
        on left: 32 33 34
        on right: 31
    boolElement <string> (50)
        on left: 35 36
        on right: 27 28 29 31
    bcomparator <string> (51)
        on left: 37 38 39 40 41 42
        on right: 35
    expression <string> (52)
        on left: 43 44 45
        on right: 19 21 24 30 34 35 44 45 51
    term <string> (53)
        on left: 46 47 48
        on right: 43 44 45 47 48
    factor <string> (54)
        on left: 49 50 51
        on right: 46 47 48
    etype <string> (55)
        on left: 52 53 54 55
        on right: 8 16 17 24 25


State 0

    0 $accept: • program $end
    1 program: • statements
    2 statements: • thingThatCanHappen
    3           | • funcs
    4           | • thingThatCanHappen statements
    5           | • funcs statements
    8 funcs: • etype IDENTIFIER LPAREN declaration_list RPAREN lbrace statementsf rbrace
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    IDENTIFIER  shift, and go to state 5

    program             go to state 6
    statements          go to state 7
    funcs               go to state 8
    thingThatCanHappen  go to state 9
    statement           go to state 10
    etype               go to state 11


State 1

   52 etype: INT •

    $default  reduce using rule 52 (etype)


State 2

   53 etype: FLOAT •

    $default  reduce using rule 53 (etype)


State 3

   54 etype: DOUBLE •

    $default  reduce using rule 54 (etype)


State 4

   55 etype: CHAR •

    $default  reduce using rule 55 (etype)


State 5

   19 thingThatCanHappen: IDENTIFIER • ASSIGN expression SEMICOLON
   20                   | IDENTIFIER • LPAREN funcCallList RPAREN SEMICOLON

    ASSIGN  shift, and go to state 12
    LPAREN  shift, and go to state 13


State 6

    0 $accept: program • $end

    $end  shift, and go to state 14


State 7

    1 program: statements •

    $default  reduce using rule 1 (program)


State 8

    2 statements: • thingThatCanHappen
    3           | • funcs
    3           | funcs •  [$end]
    4           | • thingThatCanHappen statements
    5           | • funcs statements
    5           | funcs • statements
    8 funcs: • etype IDENTIFIER LPAREN declaration_list RPAREN lbrace statementsf rbrace
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    IDENTIFIER  shift, and go to state 5

    $default  reduce using rule 3 (statements)

    statements          go to state 15
    funcs               go to state 8
    thingThatCanHappen  go to state 9
    statement           go to state 10
    etype               go to state 11


State 9

    2 statements: • thingThatCanHappen
    2           | thingThatCanHappen •  [$end]
    3           | • funcs
    4           | • thingThatCanHappen statements
    4           | thingThatCanHappen • statements
    5           | • funcs statements
    8 funcs: • etype IDENTIFIER LPAREN declaration_list RPAREN lbrace statementsf rbrace
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    IDENTIFIER  shift, and go to state 5

    $default  reduce using rule 2 (statements)

    statements          go to state 16
    funcs               go to state 8
    thingThatCanHappen  go to state 9
    statement           go to state 10
    etype               go to state 11


State 10

   18 thingThatCanHappen: statement •

    $default  reduce using rule 18 (thingThatCanHappen)


State 11

    8 funcs: etype • IDENTIFIER LPAREN declaration_list RPAREN lbrace statementsf rbrace
   24 statement: etype • IDENTIFIER ASSIGN expression SEMICOLON
   25          | etype • IDENTIFIER ASSIGN CHARVALUE SEMICOLON

    IDENTIFIER  shift, and go to state 17


State 12

   19 thingThatCanHappen: IDENTIFIER ASSIGN • expression SEMICOLON
   43 expression: • term
   44           | • expression ADD term
   45           | • expression SUB term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    expression  go to state 21
    term        go to state 22
    factor      go to state 23


State 13

   20 thingThatCanHappen: IDENTIFIER LPAREN • funcCallList RPAREN SEMICOLON
   21 funcCallList: • expression
   22             | • CHARVALUE
   23             | • IDENTIFIER COLON funcCallList
   43 expression: • term
   44           | • expression ADD term
   45           | • expression SUB term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 24
    INTEGER     shift, and go to state 20
    CHARVALUE   shift, and go to state 25

    funcCallList  go to state 26
    expression    go to state 27
    term          go to state 22
    factor        go to state 23


State 14

    0 $accept: program $end •

    $default  accept


State 15

    5 statements: funcs statements •

    $default  reduce using rule 5 (statements)


State 16

    4 statements: thingThatCanHappen statements •

    $default  reduce using rule 4 (statements)


State 17

    8 funcs: etype IDENTIFIER • LPAREN declaration_list RPAREN lbrace statementsf rbrace
   24 statement: etype IDENTIFIER • ASSIGN expression SEMICOLON
   25          | etype IDENTIFIER • ASSIGN CHARVALUE SEMICOLON

    ASSIGN  shift, and go to state 28
    LPAREN  shift, and go to state 29


State 18

   43 expression: • term
   44           | • expression ADD term
   45           | • expression SUB term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN
   51       | LPAREN • expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    expression  go to state 30
    term        go to state 22
    factor      go to state 23


State 19

   49 factor: IDENTIFIER •

    $default  reduce using rule 49 (factor)


State 20

   50 factor: INTEGER •

    $default  reduce using rule 50 (factor)


State 21

   19 thingThatCanHappen: IDENTIFIER ASSIGN expression • SEMICOLON
   44 expression: expression • ADD term
   45           | expression • SUB term

    ADD        shift, and go to state 31
    SUB        shift, and go to state 32
    SEMICOLON  shift, and go to state 33


State 22

   43 expression: term •  [ADD, SUB, SEMICOLON, RPAREN]
   47 term: term • MUL factor
   48     | term • DIV factor

    MUL  shift, and go to state 34
    DIV  shift, and go to state 35

    $default  reduce using rule 43 (expression)


State 23

   46 term: factor •

    $default  reduce using rule 46 (term)


State 24

   23 funcCallList: IDENTIFIER • COLON funcCallList
   49 factor: IDENTIFIER •  [ADD, SUB, MUL, DIV, RPAREN]

    COLON  shift, and go to state 36

    $default  reduce using rule 49 (factor)


State 25

   22 funcCallList: CHARVALUE •

    $default  reduce using rule 22 (funcCallList)


State 26

   20 thingThatCanHappen: IDENTIFIER LPAREN funcCallList • RPAREN SEMICOLON

    RPAREN  shift, and go to state 37


State 27

   21 funcCallList: expression •  [RPAREN]
   44 expression: expression • ADD term
   45           | expression • SUB term

    ADD  shift, and go to state 31
    SUB  shift, and go to state 32

    $default  reduce using rule 21 (funcCallList)


State 28

   24 statement: etype IDENTIFIER ASSIGN • expression SEMICOLON
   25          | etype IDENTIFIER ASSIGN • CHARVALUE SEMICOLON
   43 expression: • term
   44           | • expression ADD term
   45           | • expression SUB term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHARVALUE   shift, and go to state 38

    expression  go to state 39
    term        go to state 22
    factor      go to state 23


State 29

    8 funcs: etype IDENTIFIER LPAREN • declaration_list RPAREN lbrace statementsf rbrace
   13 declaration_list: • lastdec
   14                 | • declaration declaration_list
   15                 | ε •  [RPAREN]
   16 lastdec: • etype IDENTIFIER
   17 declaration: • etype IDENTIFIER COLON
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    DOUBLE  shift, and go to state 3
    CHAR    shift, and go to state 4

    $default  reduce using rule 15 (declaration_list)

    declaration_list  go to state 40
    lastdec           go to state 41
    declaration       go to state 42
    etype             go to state 43


State 30

   44 expression: expression • ADD term
   45           | expression • SUB term
   51 factor: LPAREN expression • RPAREN

    ADD     shift, and go to state 31
    SUB     shift, and go to state 32
    RPAREN  shift, and go to state 44


State 31

   44 expression: expression ADD • term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    term    go to state 45
    factor  go to state 23


State 32

   45 expression: expression SUB • term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    term    go to state 46
    factor  go to state 23


State 33

   19 thingThatCanHappen: IDENTIFIER ASSIGN expression SEMICOLON •

    $default  reduce using rule 19 (thingThatCanHappen)


State 34

   47 term: term MUL • factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    factor  go to state 47


State 35

   48 term: term DIV • factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    factor  go to state 48


State 36

   21 funcCallList: • expression
   22             | • CHARVALUE
   23             | • IDENTIFIER COLON funcCallList
   23             | IDENTIFIER COLON • funcCallList
   43 expression: • term
   44           | • expression ADD term
   45           | • expression SUB term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 24
    INTEGER     shift, and go to state 20
    CHARVALUE   shift, and go to state 25

    funcCallList  go to state 49
    expression    go to state 27
    term          go to state 22
    factor        go to state 23


State 37

   20 thingThatCanHappen: IDENTIFIER LPAREN funcCallList RPAREN • SEMICOLON

    SEMICOLON  shift, and go to state 50


State 38

   25 statement: etype IDENTIFIER ASSIGN CHARVALUE • SEMICOLON

    SEMICOLON  shift, and go to state 51


State 39

   24 statement: etype IDENTIFIER ASSIGN expression • SEMICOLON
   44 expression: expression • ADD term
   45           | expression • SUB term

    ADD        shift, and go to state 31
    SUB        shift, and go to state 32
    SEMICOLON  shift, and go to state 52


State 40

    8 funcs: etype IDENTIFIER LPAREN declaration_list • RPAREN lbrace statementsf rbrace

    RPAREN  shift, and go to state 53


State 41

   13 declaration_list: lastdec •

    $default  reduce using rule 13 (declaration_list)


State 42

   13 declaration_list: • lastdec
   14                 | • declaration declaration_list
   14                 | declaration • declaration_list
   15                 | ε •  [RPAREN]
   16 lastdec: • etype IDENTIFIER
   17 declaration: • etype IDENTIFIER COLON
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    DOUBLE  shift, and go to state 3
    CHAR    shift, and go to state 4

    $default  reduce using rule 15 (declaration_list)

    declaration_list  go to state 54
    lastdec           go to state 41
    declaration       go to state 42
    etype             go to state 43


State 43

   16 lastdec: etype • IDENTIFIER
   17 declaration: etype • IDENTIFIER COLON

    IDENTIFIER  shift, and go to state 55


State 44

   51 factor: LPAREN expression RPAREN •

    $default  reduce using rule 51 (factor)


State 45

   44 expression: expression ADD term •  [ADD, SUB, SEMICOLON, RPAREN]
   47 term: term • MUL factor
   48     | term • DIV factor

    MUL  shift, and go to state 34
    DIV  shift, and go to state 35

    $default  reduce using rule 44 (expression)


State 46

   45 expression: expression SUB term •  [ADD, SUB, SEMICOLON, RPAREN]
   47 term: term • MUL factor
   48     | term • DIV factor

    MUL  shift, and go to state 34
    DIV  shift, and go to state 35

    $default  reduce using rule 45 (expression)


State 47

   47 term: term MUL factor •

    $default  reduce using rule 47 (term)


State 48

   48 term: term DIV factor •

    $default  reduce using rule 48 (term)


State 49

   23 funcCallList: IDENTIFIER COLON funcCallList •

    $default  reduce using rule 23 (funcCallList)


State 50

   20 thingThatCanHappen: IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON •

    $default  reduce using rule 20 (thingThatCanHappen)


State 51

   25 statement: etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON •

    $default  reduce using rule 25 (statement)


State 52

   24 statement: etype IDENTIFIER ASSIGN expression SEMICOLON •

    $default  reduce using rule 24 (statement)


State 53

    6 lbrace: • LBRACE
    8 funcs: etype IDENTIFIER LPAREN declaration_list RPAREN • lbrace statementsf rbrace

    LBRACE  shift, and go to state 56

    lbrace  go to state 57


State 54

   14 declaration_list: declaration declaration_list •

    $default  reduce using rule 14 (declaration_list)


State 55

   16 lastdec: etype IDENTIFIER •  [RPAREN]
   17 declaration: etype IDENTIFIER • COLON

    COLON  shift, and go to state 58

    $default  reduce using rule 16 (lastdec)


State 56

    6 lbrace: LBRACE •

    $default  reduce using rule 6 (lbrace)


State 57

    8 funcs: etype IDENTIFIER LPAREN declaration_list RPAREN lbrace • statementsf rbrace
    9 statementsf: • thingThatCanHappen
   10            | • felements
   11            | • felements statementsf
   12            | • thingThatCanHappen statementsf
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   27 felements: • IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | • IF LPAREN boolElement RPAREN lbrace statementsf rbrace
   29          | • WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace
   30          | • RETURN expression SEMICOLON
   31          | • FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    RETURN      shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    FOR         shift, and go to state 62
    IDENTIFIER  shift, and go to state 5

    statementsf         go to state 63
    thingThatCanHappen  go to state 64
    statement           go to state 10
    felements           go to state 65
    etype               go to state 66


State 58

   17 declaration: etype IDENTIFIER COLON •

    $default  reduce using rule 17 (declaration)


State 59

   30 felements: RETURN • expression SEMICOLON
   43 expression: • term
   44           | • expression ADD term
   45           | • expression SUB term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    expression  go to state 67
    term        go to state 22
    factor      go to state 23


State 60

   27 felements: IF • LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | IF • LPAREN boolElement RPAREN lbrace statementsf rbrace

    LPAREN  shift, and go to state 68


State 61

   29 felements: WHILE • LPAREN boolElement RPAREN lbrace statementsf rbrace

    LPAREN  shift, and go to state 69


State 62

   31 felements: FOR • LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace

    LPAREN  shift, and go to state 70


State 63

    7 rbrace: • RBRACE
    8 funcs: etype IDENTIFIER LPAREN declaration_list RPAREN lbrace statementsf • rbrace

    RBRACE  shift, and go to state 71

    rbrace  go to state 72


State 64

    9 statementsf: • thingThatCanHappen
    9            | thingThatCanHappen •  [RBRACE]
   10            | • felements
   11            | • felements statementsf
   12            | • thingThatCanHappen statementsf
   12            | thingThatCanHappen • statementsf
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   27 felements: • IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | • IF LPAREN boolElement RPAREN lbrace statementsf rbrace
   29          | • WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace
   30          | • RETURN expression SEMICOLON
   31          | • FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    RETURN      shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    FOR         shift, and go to state 62
    IDENTIFIER  shift, and go to state 5

    $default  reduce using rule 9 (statementsf)

    statementsf         go to state 73
    thingThatCanHappen  go to state 64
    statement           go to state 10
    felements           go to state 65
    etype               go to state 66


State 65

    9 statementsf: • thingThatCanHappen
   10            | • felements
   10            | felements •  [RBRACE]
   11            | • felements statementsf
   11            | felements • statementsf
   12            | • thingThatCanHappen statementsf
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   27 felements: • IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | • IF LPAREN boolElement RPAREN lbrace statementsf rbrace
   29          | • WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace
   30          | • RETURN expression SEMICOLON
   31          | • FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    RETURN      shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    FOR         shift, and go to state 62
    IDENTIFIER  shift, and go to state 5

    $default  reduce using rule 10 (statementsf)

    statementsf         go to state 74
    thingThatCanHappen  go to state 64
    statement           go to state 10
    felements           go to state 65
    etype               go to state 66


State 66

   24 statement: etype • IDENTIFIER ASSIGN expression SEMICOLON
   25          | etype • IDENTIFIER ASSIGN CHARVALUE SEMICOLON

    IDENTIFIER  shift, and go to state 75


State 67

   30 felements: RETURN expression • SEMICOLON
   44 expression: expression • ADD term
   45           | expression • SUB term

    ADD        shift, and go to state 31
    SUB        shift, and go to state 32
    SEMICOLON  shift, and go to state 76


State 68

   27 felements: IF LPAREN • boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | IF LPAREN • boolElement RPAREN lbrace statementsf rbrace
   35 boolElement: • IDENTIFIER bcomparator expression
   36            | • IDENTIFIER

    IDENTIFIER  shift, and go to state 77

    boolElement  go to state 78


State 69

   29 felements: WHILE LPAREN • boolElement RPAREN lbrace statementsf rbrace
   35 boolElement: • IDENTIFIER bcomparator expression
   36            | • IDENTIFIER

    IDENTIFIER  shift, and go to state 77

    boolElement  go to state 79


State 70

   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   31 felements: FOR LPAREN • statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    DOUBLE  shift, and go to state 3
    CHAR    shift, and go to state 4

    statement  go to state 80
    etype      go to state 66


State 71

    7 rbrace: RBRACE •

    $default  reduce using rule 7 (rbrace)


State 72

    8 funcs: etype IDENTIFIER LPAREN declaration_list RPAREN lbrace statementsf rbrace •

    $default  reduce using rule 8 (funcs)


State 73

   12 statementsf: thingThatCanHappen statementsf •

    $default  reduce using rule 12 (statementsf)


State 74

   11 statementsf: felements statementsf •

    $default  reduce using rule 11 (statementsf)


State 75

   24 statement: etype IDENTIFIER • ASSIGN expression SEMICOLON
   25          | etype IDENTIFIER • ASSIGN CHARVALUE SEMICOLON

    ASSIGN  shift, and go to state 28


State 76

   30 felements: RETURN expression SEMICOLON •

    $default  reduce using rule 30 (felements)


State 77

   35 boolElement: IDENTIFIER • bcomparator expression
   36            | IDENTIFIER •  [SEMICOLON, RPAREN]
   37 bcomparator: • EQ
   38            | • NE
   39            | • GE
   40            | • GT
   41            | • LE
   42            | • LT

    EQ  shift, and go to state 81
    NE  shift, and go to state 82
    GE  shift, and go to state 83
    GT  shift, and go to state 84
    LE  shift, and go to state 85
    LT  shift, and go to state 86

    $default  reduce using rule 36 (boolElement)

    bcomparator  go to state 87


State 78

   27 felements: IF LPAREN boolElement • RPAREN lbrace statementsf rbrace elseOp
   28          | IF LPAREN boolElement • RPAREN lbrace statementsf rbrace

    RPAREN  shift, and go to state 88


State 79

   29 felements: WHILE LPAREN boolElement • RPAREN lbrace statementsf rbrace

    RPAREN  shift, and go to state 89


State 80

   31 felements: FOR LPAREN statement • boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   35 boolElement: • IDENTIFIER bcomparator expression
   36            | • IDENTIFIER

    IDENTIFIER  shift, and go to state 77

    boolElement  go to state 90


State 81

   37 bcomparator: EQ •

    $default  reduce using rule 37 (bcomparator)


State 82

   38 bcomparator: NE •

    $default  reduce using rule 38 (bcomparator)


State 83

   39 bcomparator: GE •

    $default  reduce using rule 39 (bcomparator)


State 84

   40 bcomparator: GT •

    $default  reduce using rule 40 (bcomparator)


State 85

   41 bcomparator: LE •

    $default  reduce using rule 41 (bcomparator)


State 86

   42 bcomparator: LT •

    $default  reduce using rule 42 (bcomparator)


State 87

   35 boolElement: IDENTIFIER bcomparator • expression
   43 expression: • term
   44           | • expression ADD term
   45           | • expression SUB term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    expression  go to state 91
    term        go to state 22
    factor      go to state 23


State 88

    6 lbrace: • LBRACE
   27 felements: IF LPAREN boolElement RPAREN • lbrace statementsf rbrace elseOp
   28          | IF LPAREN boolElement RPAREN • lbrace statementsf rbrace

    LBRACE  shift, and go to state 56

    lbrace  go to state 92


State 89

    6 lbrace: • LBRACE
   29 felements: WHILE LPAREN boolElement RPAREN • lbrace statementsf rbrace

    LBRACE  shift, and go to state 56

    lbrace  go to state 93


State 90

   31 felements: FOR LPAREN statement boolElement • SEMICOLON actualizacion RPAREN lbrace statementsf rbrace

    SEMICOLON  shift, and go to state 94


State 91

   35 boolElement: IDENTIFIER bcomparator expression •  [SEMICOLON, RPAREN]
   44 expression: expression • ADD term
   45           | expression • SUB term

    ADD  shift, and go to state 31
    SUB  shift, and go to state 32

    $default  reduce using rule 35 (boolElement)


State 92

    9 statementsf: • thingThatCanHappen
   10            | • felements
   11            | • felements statementsf
   12            | • thingThatCanHappen statementsf
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   27 felements: • IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   27          | IF LPAREN boolElement RPAREN lbrace • statementsf rbrace elseOp
   28          | • IF LPAREN boolElement RPAREN lbrace statementsf rbrace
   28          | IF LPAREN boolElement RPAREN lbrace • statementsf rbrace
   29          | • WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace
   30          | • RETURN expression SEMICOLON
   31          | • FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    RETURN      shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    FOR         shift, and go to state 62
    IDENTIFIER  shift, and go to state 5

    statementsf         go to state 95
    thingThatCanHappen  go to state 64
    statement           go to state 10
    felements           go to state 65
    etype               go to state 66


State 93

    9 statementsf: • thingThatCanHappen
   10            | • felements
   11            | • felements statementsf
   12            | • thingThatCanHappen statementsf
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   27 felements: • IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | • IF LPAREN boolElement RPAREN lbrace statementsf rbrace
   29          | • WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace
   29          | WHILE LPAREN boolElement RPAREN lbrace • statementsf rbrace
   30          | • RETURN expression SEMICOLON
   31          | • FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    RETURN      shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    FOR         shift, and go to state 62
    IDENTIFIER  shift, and go to state 5

    statementsf         go to state 96
    thingThatCanHappen  go to state 64
    statement           go to state 10
    felements           go to state 65
    etype               go to state 66


State 94

   31 felements: FOR LPAREN statement boolElement SEMICOLON • actualizacion RPAREN lbrace statementsf rbrace
   32 actualizacion: • IDENTIFIER ADD ADD
   33              | • IDENTIFIER SUB SUB
   34              | • IDENTIFIER ASSIGN expression

    IDENTIFIER  shift, and go to state 97

    actualizacion  go to state 98


State 95

    7 rbrace: • RBRACE
   27 felements: IF LPAREN boolElement RPAREN lbrace statementsf • rbrace elseOp
   28          | IF LPAREN boolElement RPAREN lbrace statementsf • rbrace

    RBRACE  shift, and go to state 71

    rbrace  go to state 99


State 96

    7 rbrace: • RBRACE
   29 felements: WHILE LPAREN boolElement RPAREN lbrace statementsf • rbrace

    RBRACE  shift, and go to state 71

    rbrace  go to state 100


State 97

   32 actualizacion: IDENTIFIER • ADD ADD
   33              | IDENTIFIER • SUB SUB
   34              | IDENTIFIER • ASSIGN expression

    ADD     shift, and go to state 101
    SUB     shift, and go to state 102
    ASSIGN  shift, and go to state 103


State 98

   31 felements: FOR LPAREN statement boolElement SEMICOLON actualizacion • RPAREN lbrace statementsf rbrace

    RPAREN  shift, and go to state 104


State 99

   26 elseOp: • ELSE lbrace statementsf rbrace
   27 felements: IF LPAREN boolElement RPAREN lbrace statementsf rbrace • elseOp
   28          | IF LPAREN boolElement RPAREN lbrace statementsf rbrace •  [INT, FLOAT, DOUBLE, CHAR, RBRACE, RETURN, IF, WHILE, FOR, IDENTIFIER]

    ELSE  shift, and go to state 105

    $default  reduce using rule 28 (felements)

    elseOp  go to state 106


State 100

   29 felements: WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace •

    $default  reduce using rule 29 (felements)


State 101

   32 actualizacion: IDENTIFIER ADD • ADD

    ADD  shift, and go to state 107


State 102

   33 actualizacion: IDENTIFIER SUB • SUB

    SUB  shift, and go to state 108


State 103

   34 actualizacion: IDENTIFIER ASSIGN • expression
   43 expression: • term
   44           | • expression ADD term
   45           | • expression SUB term
   46 term: • factor
   47     | • term MUL factor
   48     | • term DIV factor
   49 factor: • IDENTIFIER
   50       | • INTEGER
   51       | • LPAREN expression RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20

    expression  go to state 109
    term        go to state 22
    factor      go to state 23


State 104

    6 lbrace: • LBRACE
   31 felements: FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN • lbrace statementsf rbrace

    LBRACE  shift, and go to state 56

    lbrace  go to state 110


State 105

    6 lbrace: • LBRACE
   26 elseOp: ELSE • lbrace statementsf rbrace

    LBRACE  shift, and go to state 56

    lbrace  go to state 111


State 106

   27 felements: IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp •

    $default  reduce using rule 27 (felements)


State 107

   32 actualizacion: IDENTIFIER ADD ADD •

    $default  reduce using rule 32 (actualizacion)


State 108

   33 actualizacion: IDENTIFIER SUB SUB •

    $default  reduce using rule 33 (actualizacion)


State 109

   34 actualizacion: IDENTIFIER ASSIGN expression •  [RPAREN]
   44 expression: expression • ADD term
   45           | expression • SUB term

    ADD  shift, and go to state 31
    SUB  shift, and go to state 32

    $default  reduce using rule 34 (actualizacion)


State 110

    9 statementsf: • thingThatCanHappen
   10            | • felements
   11            | • felements statementsf
   12            | • thingThatCanHappen statementsf
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   27 felements: • IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | • IF LPAREN boolElement RPAREN lbrace statementsf rbrace
   29          | • WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace
   30          | • RETURN expression SEMICOLON
   31          | • FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   31          | FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace • statementsf rbrace
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    RETURN      shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    FOR         shift, and go to state 62
    IDENTIFIER  shift, and go to state 5

    statementsf         go to state 112
    thingThatCanHappen  go to state 64
    statement           go to state 10
    felements           go to state 65
    etype               go to state 66


State 111

    9 statementsf: • thingThatCanHappen
   10            | • felements
   11            | • felements statementsf
   12            | • thingThatCanHappen statementsf
   18 thingThatCanHappen: • statement
   19                   | • IDENTIFIER ASSIGN expression SEMICOLON
   20                   | • IDENTIFIER LPAREN funcCallList RPAREN SEMICOLON
   24 statement: • etype IDENTIFIER ASSIGN expression SEMICOLON
   25          | • etype IDENTIFIER ASSIGN CHARVALUE SEMICOLON
   26 elseOp: ELSE lbrace • statementsf rbrace
   27 felements: • IF LPAREN boolElement RPAREN lbrace statementsf rbrace elseOp
   28          | • IF LPAREN boolElement RPAREN lbrace statementsf rbrace
   29          | • WHILE LPAREN boolElement RPAREN lbrace statementsf rbrace
   30          | • RETURN expression SEMICOLON
   31          | • FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace
   52 etype: • INT
   53      | • FLOAT
   54      | • DOUBLE
   55      | • CHAR

    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    DOUBLE      shift, and go to state 3
    CHAR        shift, and go to state 4
    RETURN      shift, and go to state 59
    IF          shift, and go to state 60
    WHILE       shift, and go to state 61
    FOR         shift, and go to state 62
    IDENTIFIER  shift, and go to state 5

    statementsf         go to state 113
    thingThatCanHappen  go to state 64
    statement           go to state 10
    felements           go to state 65
    etype               go to state 66


State 112

    7 rbrace: • RBRACE
   31 felements: FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf • rbrace

    RBRACE  shift, and go to state 71

    rbrace  go to state 114


State 113

    7 rbrace: • RBRACE
   26 elseOp: ELSE lbrace statementsf • rbrace

    RBRACE  shift, and go to state 71

    rbrace  go to state 115


State 114

   31 felements: FOR LPAREN statement boolElement SEMICOLON actualizacion RPAREN lbrace statementsf rbrace •

    $default  reduce using rule 31 (felements)


State 115

   26 elseOp: ELSE lbrace statementsf rbrace •

    $default  reduce using rule 26 (elseOp)
